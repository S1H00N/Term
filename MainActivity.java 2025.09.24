package com.example.alarm;

import android.Manifest;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.app.TimePickerDialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Geocoder;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
// ui 위젯 클래스들
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

// 데이터베이스를 쉽게 사용하게 해주는 라이브러리
import androidx.room.Room;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;

// 입출력 예외 처리
import java.io.IOException;

// 날짜와 시간
import java.util.Calendar;

// 리스트 
import java.util.List;

// 지역 정보를 다루기 위한
import java.util.Locale;

//HTTP 통신을 쉽게 구현하게 해주는 라이브러리
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

// 앱의 화면을 구성하며 날씨 정보, 할 일 목록, 알람 기능을 제어함
public class MainActivity extends AppCompatActivity implements TodoAdapter.OnItemClickListener {

    // 멤버 변수 선언

    //ui 요소
    private TextView weatherTextView; // 날씨 정보를 표시할 텍스트 뷰
    private RecyclerView todoRecyclerView; // 할 일 목록을 표시할 리사이클러 뷰
    private EditText todoEditText; // 새로운 할 일을 입력받는 에디트 텍스트
    private Button addTodoButton; // 할 일 추가 버튼

    // 위치 및 날씨 관련
    private FusedLocationProviderClient fusedLocationClient; // 위치 정보를 가져오기 위한 클라이언
    private WeatherAPI weatherAPI; // 날씨 api와 통신하기 위한 인터페이스

    // 데이터베이스 관련
    private TodoAdapter todoAdapter; // 리사이클러 뷰와 데이터를 연결하는 어댑터
    private AppDatabase db; //Room 데이터베이스 인스턴스

    // 위치 권한 요쳥 결과를 처리하는 ActivityResultLauncher
    // 권한이 승인되면 날씨 정보를 가져오고 거부되면 Toast 메시지를 표시
    private final ActivityResultLauncher<String> requestPermissionLauncher =
            registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -> {
                if (isGranted) {
                    // 권한이 승인되면 위치를 가져와 날씨 정보를 알려줌
                    getLastLocationAndGetWeather();
                } else {
                    // 권한이 거부되면 사용자에게 알
                    Toast.makeText(this, "위치 권한이 거부되었습니다.", Toast.LENGTH_SHORT).show();
                }
            });

    // 액티비티가 생성될 때 처음으로 호출되는 메소드
    // ui 초기화, 데이터베이스 및 네트워크 설정, 이벤트 등록을 수행
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this); // 전체 화면 ui 지원 활성화
        setContentView(R.layout.activity_main);
        // 시스템 바 영역에 맞춰 패딩을 조절
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        // 초기화

        // Room 데이터베이스 빌드
        db = Room.databaseBuilder(getApplicationContext(), AppDatabase.class, "todo-db").build();

        // 인스턴스 생성 (api용)
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl("https://api.openweathermap.org/data/2.5/")
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        weatherAPI = retrofit.create(WeatherAPI.class);

        // ui 위젯 id 연결
        weatherTextView = findViewById(R.id.weatherTextView);
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);
        todoRecyclerView = findViewById(R.id.todoRecyclerView);
        todoEditText = findViewById(R.id.todoEditText);
        addTodoButton = findViewById(R.id.addTodoButton);

        // 리사이클러 뷰 설정
        todoAdapter = new TodoAdapter(this);
        todoRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        todoRecyclerView.setAdapter(todoAdapter);

        // 초기 데이터 로드 및 기능 실행

        // 위치 권한을 확인하고 날씨 정보를 가져옴
        checkLocationPermissionAndGetWeather();

        // 데이터베이스에서 할 일 목록을 로드하여 화면에 표
        loadTodoList();

        // 할 일 추가 버튼 클릭
        addTodoButton.setOnClickListener(v -> {
            String todoText = todoEditText.getText().toString();

            // 입력 내용이 비어있지 않은 경우에만 실행
            if (!todoText.isEmpty()) {
                Todo newTodo = new Todo();
                newTodo.content = todoText; // Todo 객체에 내용 저장

                // 데이터베이스 작업은 백그라운드에서 스레드로 수
                new Thread(() -> {
                    db.todoDao().insert(newTodo);

                    //ui 업데이트는 메인 스레드에서 수행
                    runOnUiThread(() -> {
                        todoEditText.setText(""); // 입력창 비우기
                        loadTodoList(); // 목록 새로고침
                    });
                }).start();
            }
        });

        // 알람 설정 버튼 클릭
        Button timePickerButton = findViewById(R.id.timePickerButton);
        timePickerButton.setOnClickListener(v -> {
            Calendar now = Calendar.getInstance();

            // TimePickerDialog를 생성하여 사용자에게 시간을 선택받음
            TimePickerDialog timePicker = new TimePickerDialog(
                    this,

                    // 시간이 선택되면 checkPermissionAndSetAlarm 메소드 호출
                    (view, hourOfDay, minute) -> checkPermissionAndSetAlarm(hourOfDay, minute),
                    now.get(Calendar.HOUR_OF_DAY),
                    now.get(Calendar.MINUTE),
                    false // 24시간 형식으로 표시
            );
            timePicker.show();
        });
    }

    // TodoAdapter의 삭제 버튼 클릭 이벤트를 처리하는 콜백 메소드
    
    @Override
    public void onDeleteClick(Todo todo) {
        // 데이터베이스 작업은 반드시 백그라운드 스레드에서 실행
        new Thread(() -> {
            db.todoDao().delete(todo);
            // UI 업데이트는 메인 스레드에서 실행 (목록 새로고침)
            runOnUiThread(this::loadTodoList);
        }).start();
    }

    //Room 데이터베이스에서 모든 할 일 목록을 가져와 리사이클러 뷰에 표시

    private void loadTodoList() {

        // 데이터베이스 조회 작업은 백그라운드 스레드에서 실행
        new Thread(() -> {
            List<Todo> todoList = db.todoDao().getAll();

            // 조회된 데이터를 어댑터에 설정하는 작업은 메인 스레드에서 실행
            runOnUiThread(() -> {
                todoAdapter.setItems(todoList);
            });
        }).start();
    }

    // 위치 정보 접근 권한을 확인하고 권한이 있으면 날씨 정보를 가져옴
    // 권한이 없으면 사용자에게 권한을 요청

    private void checkLocationPermissionAndGetWeather() {

        // 권한이 이미 승인되었는지 확인
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
            getLastLocationAndGetWeather();
        } else {
            // 권한이 없다면 권한 요청
            requestPermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION);
        }
    }

    
    // 기기의 마지막으로 알려진 위치를 가져와 날씨 정보를 요청
    private void getLastLocationAndGetWeather() {
        try {
            fusedLocationClient.getLastLocation()
                    .addOnSuccessListener(this, location -> {
                        if (location != null) {

                            // 위치 정보가 있으면 위도, 경도를 가져옴
                            double latitude = location.getLatitude();
                            double longitude = location.getLongitude();
                            Geocoder geocoder = new Geocoder(this, Locale.KOREAN);
                            try {
                                // 안드로이드 13 이상 버전 처리
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                                    geocoder.getFromLocation(latitude, longitude, 1, addresses -> {
                                        if (addresses != null && !addresses.isEmpty()) {
                                            String cityName = addresses.get(0).getLocality();
                                            
                                            if (cityName == null) {
                                                cityName = addresses.get(0).getAdminArea();
                                            }
                                            getWeatherData(latitude, longitude, cityName);
                                        }
                                    });
                                } else { // 이전 버전 처리
                                    List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1);
                                    if (addresses != null && !addresses.isEmpty()) {
                                        String cityName = addresses.get(0).getLocality();
                                        if (cityName == null) {
                                            cityName = addresses.get(0).getAdminArea();
                                        }
                                        getWeatherData(latitude, longitude, cityName);
                                    }
                                }
                            } catch (IOException e) {
                                Log.e("GeocoderError", "주소 변환 실패", e);
                                // 주소 변환에 실패해도 위도/경도로 날씨 정보 요청
                                getWeatherData(latitude, longitude, null);
                            }
                        } else {
                            weatherTextView.setText("위치 정보를 찾을 수 없습니다.");
                        }
                    });
        } catch (SecurityException e) {
            Log.e("LocationError", "위치 접근 중 보안 오류 발생", e);
        }
    }

    // 위도와 경도를 사용하여 api로부터 날씨 데이터를 가져와 화면에 표시
    private void getWeatherData(double latitude, double longitude, String koreanCityName) {
        String apiKey = "e85abfe3c443a1aa63a55892f35b65b3"; // api 키

        // api 요청 생성
        Call<WeatherResponse> call = weatherAPI.getCurrentWeatherByCoord(latitude, longitude, apiKey, "metric", "kr");

        // api 요청
        call.enqueue(new Callback<WeatherResponse>() {
            @Override
            public void onResponse(Call<WeatherResponse> call, Response<WeatherResponse> response) {
                if (response.isSuccessful() && response.body() != null) {
                    WeatherResponse weatherResponse = response.body();
                    double temperature = weatherResponse.main.temp;
                    String weatherStatus = "";
                    if (weatherResponse.weather != null && !weatherResponse.weather.isEmpty()) {
                        weatherStatus = weatherResponse.weather.get(0).description;
                    }
                    // 한글 도시 이름이 있으면 사용, 없으면 api가 제공하는 영문 이름 사용
                    String finalCityName = (koreanCityName != null) ? koreanCityName : weatherResponse.name;
                    weatherTextView.setText(finalCityName + " " + temperature + "°C, " + weatherStatus);

                } else {
                    weatherTextView.setText("날씨 정보 가져오기 실패");
                    Log.e("WeatherError", "응답 에러: " + response.code());
                }
            }

            @Override
            public void onFailure(Call<WeatherResponse> call, Throwable t) {
                weatherTextView.setText("네트워크 오류");
                Log.e("WeatherError", "네트워크 실패: " + t.getMessage());
            }
        });
    }

    // 알람 설정 권환을 확인하고 있으면 알람을 설정
    // 안드로이드 12 이상부터는 설정 권한이 필요함
    
    private void checkPermissionAndSetAlarm(int hourOfDay, int minute) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);

            // 권한이 있는지 확인
            if (!alarmManager.canScheduleExactAlarms()) {
                Intent intent = new Intent(Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM);
                startActivity(intent);
            } else {
                권한이 있으면 알람 설정
                setAlarm(hourOfDay, minute);
            }
        } else { 
            // 12 이전 버전인 경우 바로 알람 설정
            setAlarm(hourOfDay, minute);
        }
    }

    // 지정된 시간에 알람을 설정
    private void setAlarm(int hourOfDay, int minute) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
        calendar.set(Calendar.MINUTE, minute);
        calendar.set(Calendar.SECOND, 0);

        // 설정한 시간이 현재 시간보다 이전일 경우 다음 날로 설정
        if (calendar.before(Calendar.getInstance())) {
            calendar.add(Calendar.DATE, 1);
        }

        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        Intent intent = new Intent(this, AlarmReceiver.class);

        // 알람 시간에 실행될 작업을 생성
        PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 1, intent, PendingIntent.FLAG_IMMUTABLE);

        // 지정된 시간에 알람이 울리도록 설정
        alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, calendar.getTimeInMillis(), pendingIntent);


        Toast.makeText(this, "알람이 " + hourOfDay + "시 " + minute + "분에 설정되었습니다.", Toast.LENGTH_SHORT).show();
        Log.d("MainActivity", "알람이 " + calendar.getTime() + "에 설정되었습니다.");
    }
}
